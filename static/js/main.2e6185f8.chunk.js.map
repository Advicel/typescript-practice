{"version":3,"sources":["components/timer/Timer.tsx","components/guessColor/guessColor.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","wrapper","margin","width","time","textAlign","fontSize","name","Timer","useState","minutes","setMinutes","seconds","setSeconds","isRun","setIsRun","styles","clickHandler","useEffect","timer","setInterval","clearInterval","className","Typography","ButtonGroup","color","aria-label","variant","Button","onClick","disabled","props","backgroundColor","box","height","GuessColor","randomColor","colors","setColors","totalClicks","setTotalClicks","score","setScore","Math","floor","random","current","setCurrent","n","result","console","log","style","r","g","b","toString","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e6185f8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button, ButtonGroup, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(\n  {\n    wrapper: {\n      margin: \"0 auto\",\n      width: \"fit-content\",\n    },\n    time: {\n      textAlign: \"center\",\n      fontSize: 20,\n    },\n  },\n  {\n    name: \"Timer\",\n  }\n);\nexport function Timer() {\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n  const [isRun, setIsRun] = useState(false);\n  const styles = useStyles();\n  useEffect(() => {\n    if (isRun) {\n      let timer = setInterval(() => {\n        if (seconds > 58) {\n          setMinutes(minutes + 1);\n          setSeconds(0);\n        } else setSeconds(seconds + 1);\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [seconds, isRun]);\n  //console.log(seconds);\n  function clickHandler(): void {\n    setIsRun(!isRun);\n  }\n  function clickHandlerRefresh(): void {\n    setMinutes(0);\n    setSeconds(0);\n    setIsRun(false);\n  }\n  return (\n    <div className={styles.wrapper}>\n      <Typography className={styles.time}>\n        {`${(minutes < 10 && \"0\" + minutes) || minutes}\n            :\n        ${(seconds < 10 && \"0\" + seconds) || seconds}`}\n      </Typography>\n      <ButtonGroup\n        color=\"primary\"\n        aria-label=\"outlined primary button group\"\n        variant=\"contained\"\n      >\n        <Button onClick={clickHandler} disabled={isRun}>\n          start\n        </Button>\n        <Button onClick={clickHandler} disabled={!isRun}>\n          stop\n        </Button>\n        <Button onClick={clickHandlerRefresh}>refresh</Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { colors, makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\nconst useStyles = makeStyles(\n  (props) => ({\n    wrapper: {\n      width: \"100%\",\n      //   height: 300,\n      backgroundColor: \"yellow\",\n    },\n    box: {\n      height: 100,\n      width: 100,\n    },\n  }),\n  { name: \"GuessColor\" }\n);\n\nexport default function GuessColor() {\n  const [colors, setColors] = useState<string[]>([\n    randomColor(),\n    randomColor(),\n    randomColor(),\n  ]);\n  const [totalClicks, setTotalClicks] = useState<number>(0);\n  const [score, setScore] = useState<number>(0);\n  const [current, setCurrent] = useState<Number>(\n    Math.floor(Math.random() * 3) + 1\n  );\n\n  const styles = useStyles();\n\n  function clickHandler(n: number): boolean {\n    const result: boolean = n === current;\n    console.log(result);\n    result && setScore(score + 1);\n    setTotalClicks(totalClicks + 1);\n    setCurrent(Math.floor(Math.random() * 3) + 1);\n    setColors([randomColor(), randomColor(), randomColor()]);\n    return n === current;\n  }\n  return (\n    <div className={styles.wrapper}>\n      guess {score}\n      Всего кликов {totalClicks}\n      <div\n        style={{ backgroundColor: colors[0] }}\n        onClick={() => clickHandler(1)}\n        className={styles.box}\n      >\n        1\n      </div>\n      <div\n        style={{ backgroundColor: colors[1] }}\n        onClick={() => clickHandler(2)}\n        className={styles.box}\n      >\n        2\n      </div>\n      <div\n        style={{ backgroundColor: colors[2] }}\n        onClick={() => clickHandler(3)}\n        className={styles.box}\n      >\n        3\n      </div>\n    </div>\n  );\n}\n\nfunction randomColor(): string {\n  const r: number = Math.floor(Math.random() * 256);\n  const g: number = Math.floor(Math.random() * 256);\n  const b: number = Math.floor(Math.random() * 256);\n  return \"#\" + r.toString(16) + g.toString(16) + b.toString(16);\n}\n","import React from \"react\";\nimport { Timer } from \"./components/timer/Timer\";\nimport GuessColor from \"./components/guessColor/guessColor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>Hello</p>\n      <Timer />\n      <GuessColor />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}